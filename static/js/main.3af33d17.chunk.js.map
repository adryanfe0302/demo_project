{"version":3,"sources":["queries/quries.js","components/BookDetail.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getAuthorsQuery","gql","getBooksQuery","addBookMutation","getBookQuery","graphql","options","props","variables","id","bookId","className","onClick","setShow","book","data","console","log","name","genre","author","books","map","item","displayBookDetails","useState","selected","setSelected","showModal","setShowModal","loading","index","style","cursor","compose","authorId","state","setState","type","placeholder","onChange","e","stateTempo","target","value","disabled","authors","preventDefault","refetchQueries","query","client","ApolloClient","uri","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3af33d17.chunk.js","sourcesContent":["import { gql } from 'apollo-boost'\n\nconst getAuthorsQuery = gql`\n{\n  authors{\n    name\n    id\n  }\n}\n`\n\nconst getBooksQuery = gql`\n  {\n    books{\n      name\n      id\n    }\n  }\n`\n\nconst addBookMutation = gql`\n mutation($name: String!, $genre: String!, $authorId: ID!) {\n    addBook(name: $name, genre: $genre, authorId: $authorId){\n      name\n      id\n    }\n  }\n`\n\nconst getBookQuery = gql`\n  query($id: ID){\n    book(id: $id){\n      id\n      name\n      genre\n      author{\n        id\n        name\n        age\n        books{\n          name\n          id\n        }\n      }\n    }\n  }\n`\n\nexport { getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery }","import React from 'react'\nimport { graphql } from 'react-apollo'\nimport { getBookQuery } from './../queries/quries'\nimport './BookDetail.css'\n\nconst BookDetail = (props) => {\n    const displayBookDetails = () => {\n        const { book } = props.data\n        console.log('props', props)\n        if (book) {\n            return <div>\n                <h2> {book.name} </h2>\n                <p> {book.genre} </p>\n                <p> {book.author.name} </p>\n                <p>  All Book by this author: </p>\n                <ul>\n                    {book.author.books.map(item => {\n                        return <li key={item.id}> {item.name} </li>\n                    })}\n                </ul>\n            </div>\n        } else {\n            return <div> No Selected Book. </div>\n        }\n\n    }\n\n    return (\n      <div>\n          <div id=\"myModal\" className=\"modal\">\n            <div className=\"modal-content\">\n            <span className=\"close\" onClick={() => {\n                props.setShow(false)\n            }}>&times;</span>\n                <p>  The Book Details Goes here </p>\n                    {displayBookDetails()}\n            </div>\n            </div>\n      </div>\n    );\n  }\n  \nexport default graphql(getBookQuery, {\n    options: (props) => {\n        return {\n            variables: {\n                id: props.bookId \n            } \n        }\n    }\n})(BookDetail);\n  ","import React, { useState } from 'react'\nimport { graphql } from 'react-apollo'\nimport { getBooksQuery } from './../queries/quries'\nimport BookDetail from './BookDetail'\n\n\nconst BookList = (props) => {\n    const [selected, setSelected] = useState(null)\n    const [showModal, setShowModal] = useState(false)\n    return (\n      <div>\n          <ul id='book-list'>\n            {\n              props.data.loading ? 'loading books' :\n              props.data.books.map((book,index) => {\n                return <li key={book.id} onClick={() => {\n                  setSelected(book.id)\n                  setShowModal(true)\n                }} style={{cursor: 'pointer'}}> \n                  {book.name}\n                </li>\n              })\n            }\n          </ul>\n          {showModal && <BookDetail bookId={selected} setShow={setShowModal} /> }\n      </div>\n    );\n  }\n  \nexport default graphql(getBooksQuery)(BookList);\n  ","import React, { useState } from 'react'\nimport { graphql } from 'react-apollo'\nimport { flowRight as compose } from 'lodash';\nimport { getAuthorsQuery, addBookMutation, getBooksQuery } from './../queries/quries'\n\nconst AddBook = (props) => {\n    const [state, setState] = useState({\n      name: '',\n      genre: '',\n      authorId: ''\n    })\n\n    return (\n      <>\n        <div className=\"container\">\n        <label><b>Book Name</b></label>\n        <input type=\"text\" placeholder=\"Enter Book\" onChange={(e) => {\n          let stateTempo = {...state}\n          stateTempo.name = e.target.value\n          setState(stateTempo)\n        }} />\n\n        <label><b>Genre</b></label>\n        <input type=\"text\" placeholder=\"Enter Genre\" onChange={(e) => {\n          let stateTempo = {...state}\n          stateTempo.genre = e.target.value\n          setState(stateTempo)\n        }} />\n\n        <label><b>Authors</b></label>\n        <select onChange={(e) => {\n          let stateTempo = {...state}\n          stateTempo.authorId = e.target.value\n          setState(stateTempo)\n        }}>\n            {props.getAuthorsQuery.loading ? \n                <option disabled value=\"0\">Loading...</option> : \n                props.getAuthorsQuery.authors.map(item => {\n                    return <option value={item.id} key={item.id}>{ item.name }</option>\n                })\n            }\n        </select>\n\n        <button className=\"registerbtn\" onClick={(e) => {\n            e.preventDefault()\n            props.addBookMutation({\n              variables: {\n                name: state.name,\n                genre: state.genre,\n                authorId: state.authorId\n              },\n              refetchQueries: [{query: getBooksQuery}]\n            })\n        }}> + Add</button>\n        </div>\n      </>\n    );\n  }\n  \nexport default compose(\n  graphql(getAuthorsQuery, {name: \"getAuthorsQuery\"}),\n  graphql(addBookMutation, {name: \"addBookMutation\"})\n )(AddBook);\n  ","import React from 'react'\nimport ApolloClient from 'apollo-boost'\nimport BookList from './components/BookList'\nimport AddBook from './components/AddBook'\nimport { ApolloProvider } from 'react-apollo'\n\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}> \n    <div className=\"Main\">\n        <h1> List Book</h1>\n        <BookList />\n        \n        <h1> Add Book</h1>\n        <AddBook />\n    </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}